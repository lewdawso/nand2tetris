// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Are we supplied with an a or c instruction?
    Not(in=instruction[15], out=aInstruction); 

    //A register control
    //if a instruction OR c instruction with output to A, load A register
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=AInput);
    Or(a=aInstruction, b=ALUtoA, out=loadA);
    ARegister(in=AInput, load=loadA, out=AOut);

    //D register control
    DRegister(in=ALUout, load=ALUtoD, out=Dout);
    

    //If it's a c instruction - where do we store the output?
    //Check A register
    And(a=instruction[15], b=instruction[5], out=ALUtoA);
    //Check D register
    And(a=instruction[15], b=instruction[4], out=ALUtoD);
    //Check M[A]
    And(a=instruction[15], b=instruction[3], out=writeM);

    //A or M multiplexor
    Mux16(a=AOut, b=inM, sel=instruction[12], out=ALUin);

    //ALU
    ALU(x=DOut, y=ALUin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zrOut, ng=ngOut);

    //Set the next instruction
    And(a=instruction[1], b=zrOut, out=jeq); //out=0
    And(a=instruction[2], b=ngOut, out=jlt); //out<0
    Or(a=zrOut, b=ngOut, out=ZeroOrNeg);
    Not(in=ZeroOrNeg, out=positive);
    And(a=instruction[0], b=positive, out=jgt); //out>0
    Or(a=jeq, b=jlt, out=jle); out<=0
    Or(a=jle, b=jgt, out=jump);
    And(a=instruction[15], b=jump, out=loadPC);
    Not(in=loadPC, out=incPC); //if not loading, need to increment PC
    PC(in=Aout, load=loadPC, reset=reset, inc=incPC, out[0..14]=PCout);    
}
