// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	//Address space map
	//RAM (16K): 0x0000 - 0x3fff
	//Screen memory map: 0x4000 - 0x5fff
	//Keyboard memory map: 0x6000
	
	//13th and 14th bits of address[15] determine memory being accessed
	//00, 01 => RAM
	//10 => Screen
	//11 => Keyboard
	
	DMux4Way(in=load, sel=address[13..14], a=ram1, b=ram2, c=screen, d=keyboard);
	Or(a=ram1, b=ram2, out=ram);
	RAM16K(in=in, load=ram, address=address[0..13], out=ramOut);
	Screen(in=in, load=screen, address=address[0..12], out=screenOut);
	Keyboard(out=keyboardOut);
	Mux4Way16(a=ramOut, b=ramOut, c=screenOut, d=keyboardOut, sel=address[13..14], out=out);
}