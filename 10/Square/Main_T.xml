<token>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> Main </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Initializes </IDENTIFIER>
  <IDENTIFIER> a </IDENTIFIER>
  <IDENTIFIER> new </IDENTIFIER>
  <IDENTIFIER> game </IDENTIFIER>
  <IDENTIFIER> and </IDENTIFIER>
  <IDENTIFIER> starts </IDENTIFIER>
  <IDENTIFIER> it </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> function </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> main </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> var </KEYWORD>
  <IDENTIFIER> SquareGame </IDENTIFIER>
  <IDENTIFIER> game </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> game </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> SquareGame </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> new </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> game </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> run </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> game </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> dispose </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <SYMBOL> } </SYMBOL>
</token>