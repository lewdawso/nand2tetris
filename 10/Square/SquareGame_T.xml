<token>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> SquareGame </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> field </KEYWORD>
  <IDENTIFIER> Square </IDENTIFIER>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Constructs </IDENTIFIER>
  <IDENTIFIER> a </IDENTIFIER>
  <IDENTIFIER> new </IDENTIFIER>
  <IDENTIFIER> Square </IDENTIFIER>
  <IDENTIFIER> Game </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> constructor </KEYWORD>
  <IDENTIFIER> SquareGame </IDENTIFIER>
  <IDENTIFIER> new </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> Square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> new </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> 0, </IDENTIFIER>
  <IDENTIFIER> 0, </IDENTIFIER>
  <IDENTIFIER> 30 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <INT_CONST> 0 </INT_CONST>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <KEYWORD> this </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Deallocates </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> object's </IDENTIFIER>
  <IDENTIFIER> memory </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> dispose </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> dispose </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Memory </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> deAlloc </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> this </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Starts </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> game </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> Handles </IDENTIFIER>
  <IDENTIFIER> inputs </IDENTIFIER>
  <IDENTIFIER> from </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> user </IDENTIFIER>
  <IDENTIFIER> that </IDENTIFIER>
  <IDENTIFIER> control </IDENTIFIER>
  <SYMBOL> * </SYMBOL>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> square's </IDENTIFIER>
  <IDENTIFIER> movement, </IDENTIFIER>
  <IDENTIFIER> direction </IDENTIFIER>
  <IDENTIFIER> and </IDENTIFIER>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> run </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> var </KEYWORD>
  <KEYWORD> char </KEYWORD>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> var </KEYWORD>
  <KEYWORD> boolean </KEYWORD>
  <IDENTIFIER> exit </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> exit </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <KEYWORD> false </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> while </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> ~exit </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> while </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <INT_CONST> 0 </INT_CONST>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> Keyboard </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> keyPressed </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> moveSquare </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 81 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> exit </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <KEYWORD> true </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 90 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> decSize </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 88 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> incSize </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 131 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 1 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 133 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 130 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 3 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 132 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 4 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> while </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ~ </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <INT_CONST> 0 </INT_CONST>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> key </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> Keyboard </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> keyPressed </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> moveSquare </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Moves </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> square </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <IDENTIFIER> in </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> current </IDENTIFIER>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> moveSquare </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 1 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> moveUp </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> moveDown </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 3 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> moveLeft </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> direction </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> 4 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> square </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> moveRight </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <SYMBOL> } </SYMBOL>
</token>