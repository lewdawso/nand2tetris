<token>
  <KEYWORD> class </KEYWORD>
  <IDENTIFIER> Square </IDENTIFIER>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> field </KEYWORD>
  <KEYWORD> int </KEYWORD>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> field </KEYWORD>
  <KEYWORD> int </KEYWORD>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Constructs </IDENTIFIER>
  <IDENTIFIER> a </IDENTIFIER>
  <IDENTIFIER> new </IDENTIFIER>
  <IDENTIFIER> square </IDENTIFIER>
  <IDENTIFIER> with </IDENTIFIER>
  <IDENTIFIER> a </IDENTIFIER>
  <IDENTIFIER> given </IDENTIFIER>
  <IDENTIFIER> location </IDENTIFIER>
  <IDENTIFIER> and </IDENTIFIER>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> constructor </KEYWORD>
  <IDENTIFIER> Square </IDENTIFIER>
  <IDENTIFIER> new </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> int </KEYWORD>
  <IDENTIFIER> Ax, </IDENTIFIER>
  <KEYWORD> int </KEYWORD>
  <IDENTIFIER> Ay, </IDENTIFIER>
  <KEYWORD> int </KEYWORD>
  <IDENTIFIER> Asize </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> Ax </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> Ay </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> Asize </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> draw </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <KEYWORD> this </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Deallocates </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> object's </IDENTIFIER>
  <IDENTIFIER> memory </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> dispose </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Memory </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> deAlloc </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> this </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Draws </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> square </IDENTIFIER>
  <IDENTIFIER> on </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> draw </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> true </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Erases </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> square </IDENTIFIER>
  <IDENTIFIER> from </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> erase </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> false </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Increments </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> size </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> incSize </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> &lt </SYMBOL>
  <IDENTIFIER> 254 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> &amp </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> &lt </SYMBOL>
  <IDENTIFIER> 510 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> erase </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> draw </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Decrements </IDENTIFIER>
  <IDENTIFIER> the </IDENTIFIER>
  <IDENTIFIER> size </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> decSize </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> &gt </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> erase </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> draw </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Moves </IDENTIFIER>
  <IDENTIFIER> up </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> moveUp </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> &gt </SYMBOL>
  <IDENTIFIER> 1 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> false </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 1, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> true </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 1 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Moves </IDENTIFIER>
  <IDENTIFIER> down </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> moveDown </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> &lt </SYMBOL>
  <IDENTIFIER> 254 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> false </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 1 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> true </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 1, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Moves </IDENTIFIER>
  <IDENTIFIER> left </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> moveLeft </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> &gt </SYMBOL>
  <IDENTIFIER> 1 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> false </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 1, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> true </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 1, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <IDENTIFIER> /** </IDENTIFIER>
  <IDENTIFIER> Moves </IDENTIFIER>
  <IDENTIFIER> right </IDENTIFIER>
  <IDENTIFIER> by </IDENTIFIER>
  <IDENTIFIER> 2 </IDENTIFIER>
  <IDENTIFIER> pixels </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> */ </IDENTIFIER>
  <KEYWORD> method </KEYWORD>
  <KEYWORD> void </KEYWORD>
  <IDENTIFIER> moveRight </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> if </KEYWORD>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> &lt </SYMBOL>
  <IDENTIFIER> 510 </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> { </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> false </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 1, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> let </KEYWORD>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> = </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> 2 </IDENTIFIER>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> setColor </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <KEYWORD> true </KEYWORD>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <KEYWORD> do </KEYWORD>
  <IDENTIFIER> Screen </IDENTIFIER>
  <SYMBOL> . </SYMBOL>
  <IDENTIFIER> drawRectangle </IDENTIFIER>
  <SYMBOL> ( </SYMBOL>
  <SYMBOL> ( </SYMBOL>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> - </SYMBOL>
  <IDENTIFIER> 1, </IDENTIFIER>
  <IDENTIFIER> y, </IDENTIFIER>
  <IDENTIFIER> x </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size, </IDENTIFIER>
  <IDENTIFIER> y </IDENTIFIER>
  <SYMBOL> + </SYMBOL>
  <IDENTIFIER> size </IDENTIFIER>
  <SYMBOL> ) </SYMBOL>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <KEYWORD> return </KEYWORD>
  <SYMBOL> ; </SYMBOL>
  <SYMBOL> } </SYMBOL>
  <SYMBOL> } </SYMBOL>
</token>